package com.ritchey.simple.domain.chapel;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

public class ExemptionsExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table exemptions
     *
     * @mbggenerated Thu Aug 28 14:07:53 CDT 2014
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table exemptions
     *
     * @mbggenerated Thu Aug 28 14:07:53 CDT 2014
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table exemptions
     *
     * @mbggenerated Thu Aug 28 14:07:53 CDT 2014
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exemptions
     *
     * @mbggenerated Thu Aug 28 14:07:53 CDT 2014
     */
    public ExemptionsExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exemptions
     *
     * @mbggenerated Thu Aug 28 14:07:53 CDT 2014
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exemptions
     *
     * @mbggenerated Thu Aug 28 14:07:53 CDT 2014
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exemptions
     *
     * @mbggenerated Thu Aug 28 14:07:53 CDT 2014
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exemptions
     *
     * @mbggenerated Thu Aug 28 14:07:53 CDT 2014
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exemptions
     *
     * @mbggenerated Thu Aug 28 14:07:53 CDT 2014
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exemptions
     *
     * @mbggenerated Thu Aug 28 14:07:53 CDT 2014
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exemptions
     *
     * @mbggenerated Thu Aug 28 14:07:53 CDT 2014
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exemptions
     *
     * @mbggenerated Thu Aug 28 14:07:53 CDT 2014
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exemptions
     *
     * @mbggenerated Thu Aug 28 14:07:53 CDT 2014
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exemptions
     *
     * @mbggenerated Thu Aug 28 14:07:53 CDT 2014
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exemptions
     *
     * @mbggenerated Thu Aug 28 14:07:53 CDT 2014
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getName());
        sb.append("[");
        sb.append("Hash = ").append(hashCode());
        sb.append(",orderByClause=").append(orderByClause);
        sb.append(",distinct=").append(distinct);
        sb.append(",oredCriteria=").append(oredCriteria);
        sb.append("]");
        return sb.toString();
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table exemptions
     *
     * @mbggenerated Thu Aug 28 14:07:53 CDT 2014
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andPersonidIsNull() {
            addCriterion("personId is null");
            return (Criteria) this;
        }

        public Criteria andPersonidIsNotNull() {
            addCriterion("personId is not null");
            return (Criteria) this;
        }

        public Criteria andPersonidEqualTo(Integer value) {
            addCriterion("personId =", value, "personid");
            return (Criteria) this;
        }

        public Criteria andPersonidNotEqualTo(Integer value) {
            addCriterion("personId <>", value, "personid");
            return (Criteria) this;
        }

        public Criteria andPersonidGreaterThan(Integer value) {
            addCriterion("personId >", value, "personid");
            return (Criteria) this;
        }

        public Criteria andPersonidGreaterThanOrEqualTo(Integer value) {
            addCriterion("personId >=", value, "personid");
            return (Criteria) this;
        }

        public Criteria andPersonidLessThan(Integer value) {
            addCriterion("personId <", value, "personid");
            return (Criteria) this;
        }

        public Criteria andPersonidLessThanOrEqualTo(Integer value) {
            addCriterion("personId <=", value, "personid");
            return (Criteria) this;
        }

        public Criteria andPersonidIn(List<Integer> values) {
            addCriterion("personId in", values, "personid");
            return (Criteria) this;
        }

        public Criteria andPersonidNotIn(List<Integer> values) {
            addCriterion("personId not in", values, "personid");
            return (Criteria) this;
        }

        public Criteria andPersonidBetween(Integer value1, Integer value2) {
            addCriterion("personId between", value1, value2, "personid");
            return (Criteria) this;
        }

        public Criteria andPersonidNotBetween(Integer value1, Integer value2) {
            addCriterion("personId not between", value1, value2, "personid");
            return (Criteria) this;
        }

        public Criteria andEndtermIsNull() {
            addCriterion("endTerm is null");
            return (Criteria) this;
        }

        public Criteria andEndtermIsNotNull() {
            addCriterion("endTerm is not null");
            return (Criteria) this;
        }

        public Criteria andEndtermEqualTo(Date value) {
            addCriterion("endTerm =", value, "endterm");
            return (Criteria) this;
        }

        public Criteria andEndtermNotEqualTo(Date value) {
            addCriterion("endTerm <>", value, "endterm");
            return (Criteria) this;
        }

        public Criteria andEndtermGreaterThan(Date value) {
            addCriterion("endTerm >", value, "endterm");
            return (Criteria) this;
        }

        public Criteria andEndtermGreaterThanOrEqualTo(Date value) {
            addCriterion("endTerm >=", value, "endterm");
            return (Criteria) this;
        }

        public Criteria andEndtermLessThan(Date value) {
            addCriterion("endTerm <", value, "endterm");
            return (Criteria) this;
        }

        public Criteria andEndtermLessThanOrEqualTo(Date value) {
            addCriterion("endTerm <=", value, "endterm");
            return (Criteria) this;
        }

        public Criteria andEndtermLike(Date value) {
            addCriterion("endTerm like", value, "endterm");
            return (Criteria) this;
        }

        public Criteria andEndtermNotLike(Date value) {
            addCriterion("endTerm not like", value, "endterm");
            return (Criteria) this;
        }

        public Criteria andEndtermIn(List<Date> values) {
            addCriterion("endTerm in", values, "endterm");
            return (Criteria) this;
        }

        public Criteria andEndtermNotIn(List<Date> values) {
            addCriterion("endTerm not in", values, "endterm");
            return (Criteria) this;
        }

        public Criteria andEndtermBetween(Date value1, Date value2) {
            addCriterion("endTerm between", value1, value2, "endterm");
            return (Criteria) this;
        }

        public Criteria andEndtermNotBetween(Date value1, Date value2) {
            addCriterion("endTerm not between", value1, value2, "endterm");
            return (Criteria) this;
        }

        public Criteria andExemptIsNull() {
            addCriterion("exempt is null");
            return (Criteria) this;
        }

        public Criteria andExemptIsNotNull() {
            addCriterion("exempt is not null");
            return (Criteria) this;
        }

        public Criteria andExemptEqualTo(Integer value) {
            addCriterion("exempt =", value, "exempt");
            return (Criteria) this;
        }

        public Criteria andExemptNotEqualTo(Integer value) {
            addCriterion("exempt <>", value, "exempt");
            return (Criteria) this;
        }

        public Criteria andExemptGreaterThan(Integer value) {
            addCriterion("exempt >", value, "exempt");
            return (Criteria) this;
        }

        public Criteria andExemptGreaterThanOrEqualTo(Integer value) {
            addCriterion("exempt >=", value, "exempt");
            return (Criteria) this;
        }

        public Criteria andExemptLessThan(Integer value) {
            addCriterion("exempt <", value, "exempt");
            return (Criteria) this;
        }

        public Criteria andExemptLessThanOrEqualTo(Integer value) {
            addCriterion("exempt <=", value, "exempt");
            return (Criteria) this;
        }

        public Criteria andExemptIn(List<Integer> values) {
            addCriterion("exempt in", values, "exempt");
            return (Criteria) this;
        }

        public Criteria andExemptNotIn(List<Integer> values) {
            addCriterion("exempt not in", values, "exempt");
            return (Criteria) this;
        }

        public Criteria andExemptBetween(Integer value1, Integer value2) {
            addCriterion("exempt between", value1, value2, "exempt");
            return (Criteria) this;
        }

        public Criteria andExemptNotBetween(Integer value1, Integer value2) {
            addCriterion("exempt not between", value1, value2, "exempt");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table exemptions
     *
     * @mbggenerated do_not_delete_during_merge Thu Aug 28 14:07:53 CDT 2014
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table exemptions
     *
     * @mbggenerated Thu Aug 28 14:07:53 CDT 2014
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}